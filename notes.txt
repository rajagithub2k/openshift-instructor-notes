BUILDS & DEPLOYMENTS
====================
oc start-build|cancel-build <BC_NAME>
oc rollout latest|history|cancel|retry|pause|resume|status|undo <DC_NAME>
oc rollback <DC_NAME>

oc set triggers bc|dc <RT_NAME> \
        [--from-config] \
        [--from-image=<URI>] \
        [--from-github] \
        [--from-webhook] \
        [--auto] [--remove]

oc set build-hook bc/<RT_NAME> --post-commit --command <CMD> [--verbose]
oc set build-hook bc/<RT_NAME> --post-commit --script <SCRIPT>

oc set env dc <RT_NAME> --from {cm/<RT_NAME> | secret/<RT_NAME>}

oc set volume dc <RT_NAME> \
        --add -t secret/cm \
        {--secret-name <SECRET_NAME> | --configmap-name <CM_NAME>} \
        -m <MNT_PATH> \
        --name <NEW_VOL_NAME>

IMAGE MANAGEMENT
================
skopeo copy|delete|inspect --creds <USER>:<PASS> [--src-tls-verify] [--dest-tls-verify] <LOCATION>...
where,
        <LOCATION> = location of image
                   = docker://<REGISTRY>/<USER|GROUP>/<IMAGE>[:TAG]
                   = oci:<PATH>

Service Name used in PODs
=========================
2 Ways of using Service:
        1. ENVIRONMENT VAR
          <SERVICE_NAME>_SERVICE_HOST environment variable in pods. Service has to be created first.

        2. DNS
          <SERVICE_NAME>.<PROJECT_NAME>.svc.cluster.local FQDN name.


Route Name created by OpenShift
===============================
        <ROUTE_NAME>-<PROJ_NAME>.<DOMAIN_WILDCARD>
        <DOMAIN_WILDCARD> = apps.<BASE_DOMAIN>


Troubleshoot Certificate Signing
================================
        export KUBECONFIG={kubeconfig CERT file}
        oc get csr
        oc adm certificate approve {ID}...              # list of id from oc get csr
                                                        # with pending status


Chap 8
======
Operators
---------
        oc get clusterversion
        oc describe clusterversion			# check cluster status
        oc get co					# list cluster operators
        oc get crd | grep <keyword>			# find CRD related to co
        oc get <CRD>					# to list the CR
        oc get <CRD> <CR> -o yaml | grep -i apiversion -A1	# to get <apiversion> and <kind>
        oc explain <kind>.spec --api-version <apiversion>	# learn contents of CR


        Tips:
                * you can also use 'oc describe co <CO-NAME>' to check what are the CRs
                  used by the cluster operators, under "Related Objects".


Chap 9
======
Checking Cluster Health
-----------------------
        oc adm node-logs [-u {crio|kubelet}] <MASTER_NODE>
        oc debug node/<MASTER_NODE>				# access master node
                oc debug node/master01
                chroot /host
        crictl ps 						# check containers

        oc adm top node [<MASTER/WORKER>]               # Actual cpu & memory usage
        oc describe node <MASTER/WORKER>                # Conditions, Capacity, Allocatable, Allocated

        Tips:
                * Other than the base services(kubelet and cri-o) and static/regular pods checking,
                  it is also useful to check the status of the operators as listed in Chap 8 above.
                  After all, the whole cluster IS MANAGED by the operators.

Chap 10 & Chap 11: RBAC, SCC, Secrets
=====================================
        oc adm policy <OPERATION>
        where,
                <OPERATION> = add-role-to-user <ROLE> <USER>|{-z <SERVICE_ACCOUNT>} [-n <PROJ>]
                            = add-role-to-group <ROLE> <GROUP> [-n <PROJ>]
                            = remove-role-from-user <ROLE> <USER>|{-z <SERVICE_ACCOUNT>} [-n <PROJ>]
                            = remove-role-from-group <ROLE> <GROUP> [-n <PROJ>]
        
                            = add-cluster-role-to-user <ROLE> <USER>|{-z <SERVICE_ACCOUNT>}
                            = add-cluster-role-to-group <ROLE> <GROUP>
                            = remove-cluster-role-from-user <ROLE> <USER>|{-z <SERVICE_ACCOUNT>}
                            = remove-cluster-role-from-group <ROLE> <GROUP>
        
                            = add-scc-to-user <SCC> <USER>|{-z <SERVICE_ACCOUNT>} [-n <PROJ>]
                            = add-scc-to-group <SCC> <GROUP> [-n <PROJ>]
                            = remove-scc-from-user <SCC> <USER>|{-z <SERVICE_ACCOUNT>} [-n <PROJ>]
                            = remove-scc-from-group <SCC> <GROUP> [-n <PROJ>]
        
        Tips:
        -----
                * never run oc CLI using a shared user account
                * login to cluster using X509 cert if oauth server not responding(hving problems)
        

        Service Account
        ---------------
                oc create sa <SA_NAME>
                oc adm policy add-scc-to-user <SCC_NAME> -z <SA_NAME>
                oc adm policy remove-scc-from-user <SCC_NAME> -z <SA_NAME>


                oc set sa <DC/DEPLOYMENT> <SA_NAME>

        WHERE,
                <DC/DEPLOYMENT> = deployment/<DEPLOYMENT_NAME> OR dc/<DC_NAME>

        Security Context Constraints(SCC)
        ---------------------------------
                oc get scc
                oc describe scc <SCC_NAME>

                oc describe pod <POD_NAME> | grep scc

                oc get pod <POD_NAME> | oc policy scc-subject-review -f -
                oc policy scc-subject-review -f <POD.yaml>

        Creating Secret/CM
        ------------------
                oc create secret/cm -h
                
                oc create secret generic <SECRET_NAME> \
                  [--from-literal <KEY>=<VALUE>]... \
                  [--from-file <KEY>=<FILE>]...
                
                oc create secret tls <SECRET_NAME> --cert <CERT_FILE> --key <KEY_FILE>
                
                oc create cm <CM_NAME> \
                  [--from-literal <KEY>=<VALUE>]... \
                  [--from-file <KEY>=<FILE>]...
        
        
        Updating Secret/CM
        ------------------
                oc extract secret/<SECRET_NAME> [--to <PATH> [--confirm]]
                oc set data <SECRET_NAME/CM_NAME> \
                  [--from-literal <KEY>=<VALUE>]... \
                  [--from-file <KEY>=<FILE>]...

        Using Secret/CM
        ---------------
                oc set env <DC/DEPLOYMENT> --from secret/<SECRET_NAME> [--prefix <PREFIX>]
                oc set volume <DC/DEPLOYMENT> --add --type {secret/configmap} \
                  [--secret-name <SECRET_NAME>] [--configmap-name <CM_NAME>] \
                  --mount-path <PATH>
        


        Example:
                oc create secret generic mysecret --from-literal user=albert --from-literal lang=en
                oc set env deploy/<DEPLOYMENT_NAME> --from secret/mysecret
                oc get pods
                # wait till new pods are rolled out
                oc get pods
                oc rsh <POD_NAME> env | egrep -i 'USER|LANG'
                # the variables in the secret are now environment variables in the pods

                oc create cm mycm --from-literal index.html='Hello World' --from-literal test.html='My Test Data'

                oc set volume deploy/<DEPLOYMENT_NAME> --add --configmap-name mycm --mount-path /var/www/html/
                oc get pods
                # wait for new rollout
                oc get pods
                oc rsh <POD_NAME> cat /var/www/html/index.html
                oc rsh <POD_NAME> cat /var/www/html/test.html

